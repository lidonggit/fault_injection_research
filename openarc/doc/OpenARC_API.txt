[OpenARC API]

****************************************************
** The following OpenACC directives are supported **
****************************************************

#pragma acc parallel [clause[[,] clause]...]
	structured block

where clause is one of the following:
if( condition )
async [( scalar-integer-expression )]
num_gangs( scalar-integer-expression )
num_workers( scalar-integer-expression )
vector_length( scalar-integer-expression )
reduction( operator:list )
copy( list ) 
copyin( list ) 
copyout( list ) 
create( list ) 
present( list ) 
present_or_copy( list ) 
pcopy( list ) 
present_or_copyin( list ) 
pcopyin( list ) 
present_or_copyout( list ) 
pcopyout( list ) 
present_or_create( list ) 
pcreate( list ) 
deviceptr( list ) 
private( list ) 
firstprivate( list ) 

#pragma acc kernels [clause[[,] clause]...]
	structured block

where clause is one of the following:
if( condition )
async [( scalar-integer-expression )]
copy( list ) 
copyin( list ) 
copyout( list ) 
create( list ) 
present( list ) 
present_or_copy( list ) 
pcopy( list ) 
present_or_copyin( list ) 
pcopyin( list ) 
present_or_copyout( list ) 
pcopyout( list ) 
present_or_create( list ) 
pcreate( list ) 
deviceptr( list ) 

#pragma acc data [clause[[,] clause]...]
	structured block

where clause is one of the following:
if( condition )
copy( list ) 
copyin( list ) 
copyout( list ) 
create( list ) 
present( list ) 
present_or_copy( list ) 
pcopy( list ) 
present_or_copyin( list ) 
pcopyin( list ) 
present_or_copyout( list ) 
pcopyout( list ) 
present_or_create( list ) 
pcreate( list ) 
deviceptr( list ) 


#pragma acc loop [clause[[,] clause]...]
	for loop

where clause is one of the following:
collapse( n )
gang [( scalar-integer-expression )]
worker [( scalar-integer-expression )]
vector [( scalar-integer-expression )]
seq
independent
private( list )
reduction( operator:list )

#pragma acc parallel loop [clause[[,] clause]...]
	for loop

where clause is any clause allowed on a parallel or loop directive.

#pragma acc kernels loop [clause[[,] clause]...]
	for loop

where clause is any clause allowed on a kernels or loop directive.

#pragma acc declare declclause [[,] declclause]...

where declclause is one of the following:
copy( list ) 
copyin( list ) 
copyout( list ) 
create( list ) 
present( list ) 
present_or_copy( list ) 
pcopy( list ) 
present_or_copyin( list ) 
pcopyin( list ) 
present_or_copyout( list ) 
pcopyout( list ) 
present_or_create( list ) 
pcreate( list ) 
deviceptr( list ) 
device_resident( list ) 

#pragma acc update clause[[,] clause]...

where clause is one of the following:
host( list )
device( list )
if( condition )
async [( scalar-integer-expression )]

#pragma acc wait [( scalar-integer-expression )]

#pragma acc host_data [clause[[,] clause]...]
	structured block

where clause is one of the following:
use_device( condition )

**************************************************
** List of OpenACC constructs not yet supported **
**************************************************
#pragma acc cache ( list )


*********************************
** OpenARC Directive Extension **
*********************************
#pragma acc #define macro val

used to pass macro values to OpenARC directives.

#pragma acc cuda [clause[[,] clause]...]
	structured block

where clause is one of the following
registerRO(list)  // R/O shared scalar or array data in the list are cached 
				  // on the CUDA registers.
registerRW(list)  // R/W shared scalar or array data in the list are cached
				  // on the CUDA registers.
noregister(list)  // Variables in the list will not be cached on CUDA registers.
sharedRO(list)    // R/O shared data in the list are cached on the CUDA shared memory.
                  // R/O worker-private data in the list will be allocated on the 
				  // CUDA shared memory by replicating them as necessary.
                  // R/O gang-private data in the list will be allocated on the 
				  // CUDA shared memory.
sharedRW(list)    // R/W shared data in the list are cached on the CUDA shared memory.
                  // R/W worker-private data in the list will be allocated on the 
				  // CUDA shared memory by replicating them as necessary.
                  // R/W gang-private data in the list will be allocated on the 
				  // CUDA shared memory.
noshared(list)    // Variables in the list will not be cached on the CUDA shared 
				  // memory.
texture(list)     // R/O 1-dim shared arrays in the list are cached on the CUDA 
				  // texture cache.
notexture(list)   // Variables in the list will not be cached on the CUDA texture cache.
constant(list)    // R/O shared scalar or array data in the list are allocated
				  // on the CUDA constant memory
noconstant(list)  // Variables in the list will not be allocated on CUDA constant memory
global(list)      // Worker-private variables in the list are allocated on the 
				  // global memory using array expansion.
noreductionunroll(list)
noploopswap
noloopcollapse
multisrccg(list)
multisrcgc(list)
conditionalsrc(list)
enclosingloops(list) 
permute(list)    // for loop permutation transformation, resulting loops
                 // have loops nesting in the order of index variables in
                 // the argument list.

#pragma acc ainfo procname(proc-name) kernelid(kernel-id)
	structured block

#pragma acc barrier //replaced with device-specific local synchronization call 
					//(e.g., CUDA "__syncthreads()").

#pragma acc resilience [clause[[,] clause]...]
	structured block

where clause is one of the following
ftregion
ftcond(condition)
ftdata(list)
num_faults(scalar-integer-expression)
num_ftbits(scalar-integer-expression)
repeat(scalar-integer-expression)
ftthread(scalar-integer-expression)

#pragma acc ftinject [clause[[,] clause]...]

where clause is one of the following
ftdata(list)
ftthread(scalar-integer-expression)

#pragma acc ftregion [clause[[,] clause]...]
	structured block

where clause is one of the following
ftdata(list)
ftthread(scalar-integer-expression)

#pragma acc profile region label(name) [clause[[,] clause]...]
	structured block

where clause is one of the following
mode(list) 	//a list consists of the following:
			//memory, instructions, occupancy, memorytransfer, all
event(list) //a list consists of expressions
verbosity(arg) //an arg is a non-negative integer where
			   //0 is the least verbose mode. 

#pragma acc enter profile region label(name) [clause[[,] clause]...]

where clause is one of the following
mode(list) 	//a list consists of the following:
			//memory, instructions, occupancy, memorytransfer, all
event(list) //a list consists of expressions
verbosity(arg) //an arg is a non-negative integer where
			   //0 is the least verbose mode. 

#pragma acc exit profile region label(name)

#pragma acc profile track label(name) [clause[[,] clause]...]
	structured block

where clause is one of the following
event(list) //a list consists of expressions
induction(induction-expression)
profcond(expression) 
mode(list) 	//a list consists of the following:
			//memory, instructions, occupancy, memorytransfer, all

#pragma acc profile measure label(name) [clause[[,] clause]...]

where clause is one of the following
event(list) //a list consists of expressions
induction(induction-expression)
profcond(expression) 

***************************************************************
** OpenARC Internal Directives (used internally by compiler) **
***************************************************************
#pragma acc internal [clause[[,] clause]...]
	structured block

where clause can be anyone including
accglobal(list) // The list contains the String names of global symbols.
accshared(list) // The list contains shared symbols.
accexplicitshared(list) // The list contains shared symbols explicilty 
						// specified by users.
accprivate(list) // The list contains private symbols.
accreduction(list) // The list contains reduction symbols.
accdeviceptr(list) // The list contains deviceptr symbols.
accreadonly(list) // The list contains R/O symbols.

iterspace(exp) // exp is the iteration size expression for a gang loop.
rcreate(list) 	// The list contains reduction symbols whose GPU memory will 
				//be allocated at the attached annotatable.
gangdim(integer) // Contains the dimension of the attached gang loop. In a triply 
				 // nested gang loops, the outermost gang loop will have 
				 // gangdim(3), while the innermost gang loop will have gangdim(1).
workerdim(integer) 	// contains the dimension of the attached worker loop. 
				   	// In a triply nested worker loops, the outermost worker 
					// loop will have workerdim(3), while the innermost worker 
					// loop will have workerdim(1).
gangconf(list) 	// The list contains the numbers of gangs for each gang loop in 
				// the reverse order (the innermost gang loop first).
				// - In nested gang loops, only the outermost gang loop contains 
				// this clause. 
				// - Added by CompRegionConfAnalysis pass to each kernels loop.
workerconf(list) 	// The list contains the numbers of workers for each worker 
					// loop in the reverse order (the innermost worker loop first).
					// - In nested worker loops, only the outermost worker loop 
					// contains this clause. 
					// - Added by CompRegionConfAnalysis pass to each kernels 
					// loop.
totalnumgangs(exp) 	// The exp is the total number of gangs for the attached 
					// nested gang loops.
					// - In nested gang loops, only the outermost gang loop 
					// contains this clause. 
					// - Added by CompRegionConfAnalysis pass to each kernels loop.
totalnumworkers(exp) 	// The exp is the total number of workers for the attached
						// nested worker loops.
						// - In nested worker loops, only the outermost worker 
						// loop contains this clause. 
						// - Added by CompRegionConfAnalysis pass to each 
						// kernels loop
kernelConfPt_[kernelname] 	// Indicate the point where the CUDA 
							// kernel-configuration-related statements are 
							// inserted.
refname(refname) 	// contains a string that can be used as a reference to 
					// identify a location in a program.
					// 	- For compute regions,
					//		- use "${procedure}_kernel${counter}" as names.
					//  - For data regions,
					//		- use "${procedure}_data${counter}" as names.
					//	- For update directives,
					//		- use "{$procedure}_update${counter}" as names.
					//	- For declare directives in a procedure,
					//		- use "{$procedure}_declare${counter}" as names.
					//	- For declare directives out of a procedure, 
					//		- use "{$filename}_declare${counter}" as names.
					//	- For each check_read() or check_write() call, 
					//		- Use "${procedure}_hostcheck${counter}" 
					//	- For CPU-access checking
					//		- Use "${procedure}_kernel${counter}" for GPU-access checking
innergang		//Indicate that the attached loop is the inner loop of a stripmined gang loop.


******************************
** ASPEN Modeling Directive **
******************************

#pragma aspen enter modelregion [label(model-name)]

#pragma aspen exit modelregion [label(model-name)]

#pragma aspen modelregion [label(model-name)]
//atached to structured block

#pragma aspen declare [clause[[,] clause]...]

where clause is one of the following
param(param-arg-list) //param(n:1000, ntimes:0)
data(data-arg-list)	//data(matA:traits(Matrix(n, n, wordSize)),
					//matB:capacity(n*n*wordSize))

where param-arg is one of the following:
identifier[:init-exp] //ASPENParam

where data-arg is one of the following:
identifier:traits(trait-list)	//ASPENData


#pragma aspen control [clause[[,] clause]...]
//atached to structured block

where clause is one of the following
loop [(itr-size)]
if (cond-exp-list)
probability (prob-exp-list)
ignore
parallelism (para-arg)
execute
label (string-name)
flops (flops-arg-list)
loads (loads-arg-list)
stores (stores-arg-list)
messages (messages-arg-list)
intracomm (messages-arg-list)
allocates (memory-arg-list)
resizes (memory-arg-list)
frees (memory-arg-list)

where para-arg is one of the following:
exp[:traits(trait-list)]	//ASPENResource

where flops-arg is one of the following:
size-exp[:traits(trait-list)]	//ASPENResource

where loads-arg is one of the following:
size-exp[:from(ID)][:traits(trait-list)]	//ASPENResource

where stores-arg is one of the following:
size-exp[:to(ID)][:traits(trait-list)]	//ASPENResource

where message-arg is one of the following:
size-exp[:to(ID)][:traits(trait-list)]	//ASPENResource

where memory-arg is one of the following:
identifier:capacity(exp)[:traits(trait-list)]	//ASPENData
